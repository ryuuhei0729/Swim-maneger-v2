{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/ryuhei.hosoi/Swim-maneger-v2/src/lib/supabase.ts"],"sourcesContent":["import { createClient, type SupabaseClient } from '@supabase/supabase-js'\nimport { createBrowserClient } from '@supabase/ssr'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\n// ブラウザ環境でSupabaseクライアントを管理（Hot Reload対応）\ndeclare global {\n  interface Window {\n    __supabase_client__?: SupabaseClient\n  }\n}\n\n// ブラウザ用のSupabaseクライアント（シングルトン、Hot Reload対応）\nexport const createClientComponentClient = (): SupabaseClient => {\n  if (typeof window === 'undefined') {\n    // サーバーサイドでは新しいインスタンスを返す\n    return createBrowserClient(supabaseUrl, supabaseAnonKey)\n  }\n  \n  // windowオブジェクトでクライアントを管理してHot Reloadに対応\n  if (!window.__supabase_client__) {\n    window.__supabase_client__ = createBrowserClient(supabaseUrl, supabaseAnonKey, {\n      auth: {\n        storageKey: 'swim-manager-auth',\n        storage: window.localStorage,\n        detectSessionInUrl: false, // URLからセッション検出を無効化\n        autoRefreshToken: true,\n        persistSession: true,\n      },\n      // リアルタイム機能を無効にしてパフォーマンス向上\n      realtime: {\n        params: {\n          eventsPerSecond: 10,\n        },\n      },\n    })\n  }\n  \n  return window.__supabase_client__\n}\n\n// グローバルなSupabaseクライアント（必要な場合のみ）\n// export const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// 型定義\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          id: string\n          email: string\n          name: string | null\n          avatar_url: string | null\n          role: 'admin' | 'manager' | 'player' | 'coach' | 'director'\n          generation: number | null\n          birthday: string | null\n          bio: string | null\n          gender: number\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id: string\n          email: string\n          name?: string | null\n          avatar_url?: string | null\n          role?: 'admin' | 'manager' | 'player' | 'coach' | 'director'\n          generation?: number | null\n          birthday?: string | null\n          bio?: string | null\n          gender?: number\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          email?: string\n          name?: string | null\n          avatar_url?: string | null\n          role?: 'admin' | 'manager' | 'player' | 'coach' | 'director'\n          generation?: number | null\n          birthday?: string | null\n          bio?: string | null\n          gender?: number\n          created_at?: string\n          updated_at?: string\n        }\n      }\n    }\n  }\n}\n"],"names":[],"mappings":";;;AAGoB;AAFpB;AAAA;;AAEA,MAAM;AACN,MAAM;AAUC,MAAM,8BAA8B;IACzC;;IAKA,wCAAwC;IACxC,IAAI,CAAC,OAAO,mBAAmB,EAAE;QAC/B,OAAO,mBAAmB,GAAG,CAAA,GAAA,6KAAA,CAAA,sBAAmB,AAAD,EAAE,aAAa,iBAAiB;YAC7E,MAAM;gBACJ,YAAY;gBACZ,SAAS,OAAO,YAAY;gBAC5B,oBAAoB;gBACpB,kBAAkB;gBAClB,gBAAgB;YAClB;YACA,0BAA0B;YAC1B,UAAU;gBACR,QAAQ;oBACN,iBAAiB;gBACnB;YACF;QACF;IACF;IAEA,OAAO,OAAO,mBAAmB;AACnC","debugId":null}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":["file:///Users/ryuhei.hosoi/Swim-maneger-v2/src/components/providers/AuthProvider.tsx"],"sourcesContent":["'use client'\n\nimport React, { createContext, useContext, useEffect, useState, useRef } from 'react'\nimport { User } from '@supabase/supabase-js'\nimport { createClientComponentClient } from '@/lib/supabase'\nimport type { Database } from '@/lib/supabase'\n\ntype UserProfile = Database['public']['Tables']['users']['Row']\n\ninterface AuthState {\n  user: User | null\n  profile: UserProfile | null\n  loading: boolean\n}\n\ninterface AuthContextType extends AuthState {\n  signIn: (email: string, password: string) => Promise<{ data: any; error: any }>\n  signUp: (email: string, password: string, name?: string) => Promise<{ data: any; error: any }>\n  signOut: () => Promise<{ error: any }>\n  resetPassword: (email: string) => Promise<{ error: any }>\n  updatePassword: (newPassword: string) => Promise<{ error: any }>\n  updateProfile: (updates: Partial<UserProfile>) => Promise<{ error: any }>\n  isAuthenticated: boolean\n  isLoading: boolean\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\n// Hot Reload対応のSupabaseクライアント（グローバルスコープで管理）\nconst getSupabaseClient = () => createClientComponentClient()\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [authState, setAuthState] = useState<AuthState>({\n    user: null,\n    profile: null,\n    loading: true\n  })\n\n  // タイムアウト用のref\n  const loadingTimeoutRef = useRef<NodeJS.Timeout | null>(null)\n\n  // ユーザープロフィールを取得\n  const fetchUserProfile = async (userId: string): Promise<UserProfile | null> => {\n    try {\n      const supabase = getSupabaseClient()\n      \n      // タイムアウト付きでプロフィールを取得\n      const profilePromise = supabase\n        .from('users')\n        .select('*')\n        .eq('id', userId)\n        .single()\n\n      const timeoutPromise = new Promise<never>((_, reject) => {\n        setTimeout(() => reject(new Error('Profile fetch timeout')), 5000) // 5秒タイムアウト\n      })\n\n      const { data, error } = await Promise.race([profilePromise, timeoutPromise])\n      \n      if (error) {\n        // プロフィールが存在しない場合は作成を試行（タイムアウトの場合は除く）\n        if (error.code === 'PGRST116' && error.message !== 'Profile fetch timeout') {\n          return await createUserProfile(userId)\n        }\n        return null\n      }\n      \n      return data\n    } catch (error) {\n      return null\n    }\n  }\n\n  // プロフィールを非同期で更新（UIをブロックしない）\n  const updateProfileAsync = async (userId: string) => {\n    try {\n      const profile = await fetchUserProfile(userId)\n      setAuthState(prev => ({ ...prev, profile }))\n    } catch (error) {\n      console.error('[Auth] Failed to update profile async:', error)\n    }\n  }\n\n  // ユーザープロフィールを作成\n  const createUserProfile = async (userId: string): Promise<UserProfile | null> => {\n    try {\n      const supabase = getSupabaseClient()\n      const { data: { user } } = await supabase.auth.getUser()\n      \n      if (!user) return null\n      \n      const newProfile = {\n        id: userId,\n        email: user.email || '',\n        name: user.user_metadata?.name || '',\n        avatar_url: null,\n        role: 'player' as const, // デフォルトロール\n        generation: null,\n        birthday: null,\n        bio: null,\n        gender: 0,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }\n      \n      const { data, error } = await supabase\n        .from('users')\n        .insert(newProfile)\n        .select()\n        .single()\n      \n      if (error) {\n        return null\n      }\n      \n      return data\n    } catch (error) {\n      return null\n    }\n  }\n\n  // ログイン\n  const signIn = async (email: string, password: string) => {\n    try {\n      const supabase = getSupabaseClient()\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      })\n      \n      if (error) throw error\n      \n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  // サインアップ\n  const signUp = async (email: string, password: string, name?: string) => {\n    try {\n      const supabase = getSupabaseClient()\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            name: name || ''\n          }\n        }\n      })\n      \n      if (error) throw error\n      \n      // サインアップ成功時にプロフィールも作成\n      if (data.user) {\n        await createUserProfile(data.user.id)\n      }\n      \n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  // ログアウト\n  const signOut = async () => {\n    try {\n      const supabase = getSupabaseClient()\n      const { error } = await supabase.auth.signOut()\n      if (error) throw error\n      \n      setAuthState({\n        user: null,\n        profile: null,\n        loading: false\n      })\n      \n      return { error: null }\n    } catch (error) {\n      return { error }\n    }\n  }\n\n  // パスワードリセット\n  const resetPassword = async (email: string) => {\n    try {\n      const supabase = getSupabaseClient()\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/reset-password`\n      })\n      \n      if (error) throw error\n      \n      return { error: null }\n    } catch (error) {\n      return { error }\n    }\n  }\n\n  // パスワード更新\n  const updatePassword = async (newPassword: string) => {\n    try {\n      const supabase = getSupabaseClient()\n      const { error } = await supabase.auth.updateUser({\n        password: newPassword\n      })\n      \n      if (error) throw error\n      \n      return { error: null }\n    } catch (error) {\n      return { error }\n    }\n  }\n\n  // プロフィール更新\n  const updateProfile = async (updates: Partial<UserProfile>) => {\n    try {\n      if (!authState.user) throw new Error('User not authenticated')\n      \n      const supabase = getSupabaseClient()\n      const { error } = await supabase\n        .from('users')\n        .update({ ...updates, updated_at: new Date().toISOString() })\n        .eq('id', authState.user.id)\n      \n      if (error) throw error\n      \n      // プロフィールを再取得\n      const updatedProfile = await fetchUserProfile(authState.user.id)\n      if (updatedProfile) {\n        setAuthState(prev => ({ ...prev, profile: updatedProfile }))\n      }\n      \n      return { error: null }\n    } catch (error) {\n      return { error }\n    }\n  }\n\n  useEffect(() => {\n    // 同一のSupabaseクライアントインスタンスを使用\n    const supabase = getSupabaseClient()\n    \n    // ローディングタイムアウトを設定（5秒）\n    loadingTimeoutRef.current = setTimeout(() => {\n      setAuthState(prev => ({ ...prev, loading: false }))\n    }, 5000)\n    \n    // 初期セッション取得\n    const getInitialSession = async () => {\n      try {\n        const { data: { session }, error } = await supabase.auth.getSession()\n        \n        if (error) {\n          setAuthState({\n            user: null,\n            profile: null,\n            loading: false\n          })\n          return\n        }\n        \n        if (session?.user) {\n          setAuthState({\n            user: session.user,\n            profile: null, // プロフィールは後で取得\n            loading: false\n          })\n          \n          // プロフィールを非同期で取得（UIをブロックしない）\n          updateProfileAsync(session.user.id)\n        } else {\n          setAuthState({\n            user: null,\n            profile: null,\n            loading: false\n          })\n        }\n      } catch (error) {\n        setAuthState({\n          user: null,\n          profile: null,\n          loading: false\n        })\n      } finally {\n        // タイムアウトをクリア\n        if (loadingTimeoutRef.current) {\n          clearTimeout(loadingTimeoutRef.current)\n          loadingTimeoutRef.current = null\n        }\n      }\n    }\n\n    getInitialSession()\n\n    // 認証状態の変更を監視（同じクライアントインスタンスを使用）\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        try {\n          if (session?.user) {\n            setAuthState({\n              user: session.user,\n              profile: null, // プロフィールは後で取得\n              loading: false\n            })\n            // プロフィールを非同期で取得\n            updateProfileAsync(session.user.id)\n          } else {\n            setAuthState({\n              user: null,\n              profile: null,\n              loading: false\n            })\n          }\n        } catch (error) {\n          setAuthState(prev => ({ ...prev, loading: false }))\n        }\n      }\n    )\n\n    return () => {\n      subscription.unsubscribe()\n      // タイムアウトをクリア\n      if (loadingTimeoutRef.current) {\n        clearTimeout(loadingTimeoutRef.current)\n        loadingTimeoutRef.current = null\n      }\n    }\n  }, [])\n\n  const value: AuthContextType = {\n    ...authState,\n    signIn,\n    signUp,\n    signOut,\n    resetPassword,\n    updatePassword,\n    updateProfile,\n    isAuthenticated: !!authState.user,\n    isLoading: authState.loading\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}