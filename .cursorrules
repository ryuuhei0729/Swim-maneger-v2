# Swim Manager v2 - Cursor AI Rules

## プロジェクト概要
水泳選手管理システム（個人利用版）
- Next.js + TypeScript (Web)
- Flutter (Mobile)
- Supabase (Backend)
- GraphQL (API)

## コーディングルール

### 言語設定
- **必須**: 常に日本語で回答してください
- UI表示は日本語を使用
- コメントは日本語で記述

### 技術スタック
- **Frontend**: Next.js 14, React, TypeScript, Tailwind CSS
- **Backend**: Supabase, GraphQL
- **Mobile**: Flutter, Dart
- **Database**: PostgreSQL (Supabase)
- **Authentication**: Supabase Auth

### ファイル構造
```
apps/
  web/           # Next.jsアプリケーション
    app/         # App Router
    components/  # 共有コンポーネント
    contexts/    # React Context
    graphql/     # GraphQLクエリ・ミューテーション
    hooks/       # カスタムフック
    lib/         # ユーティリティ
  mobile/        # Flutterアプリケーション
supabase/        # Supabaseプロジェクト設定
  functions/     # Edge Functions
  migrations/    # データベースマイグレーション
```

### コーディング規約

#### TypeScript
- 型安全性を重視
- `any`の使用は最小限に（型エラー回避時のみ）
- インターフェースを適切に定義
- 非同期処理は`async/await`を使用

#### React
- 関数コンポーネントを使用
- Hooksを適切に活用
- プロップスの型定義を必須とする
- useEffectの依存配列を正確に指定

#### GraphQL
- クエリとミューテーションを適切に分離
- フィールド名はcamelCaseで統一
- エラーハンドリングを適切に実装

#### データベース
- テーブル名とカラム名はsnake_caseで統一
- GraphQLスキーマではcamelCaseに変換
- RLS（Row Level Security）を適切に設定

### 特定の実装パターン

#### Apollo Client
- optimisticResponseを使用してUX向上
- キャッシュ更新を適切に実装
- refetchQueriesでデータ整合性を保つ

#### フォーム処理
- React Hook FormまたはuseStateを使用
- バリデーションを適切に実装
- エラーメッセージは日本語で表示

#### 日付・時間処理
- date-fnsライブラリを使用
- タイムゾーンを考慮した実装
- フォーマットは日本語ロケールを使用

### UI/UX
- レスポンシブデザインを実装
- Tailwind CSSのユーティリティクラスを活用
- ローディング状態を適切に表示
- エラー状態のハンドリングを実装

### デバッグ・ログ
- 開発時のみconsole.logを使用
- 本番環境では削除またはログレベル制御
- エラーは適切にキャッチして処理

### パフォーマンス
- 不要な再レンダリングを避ける
- useCallbackとuseMemoを適切に使用
- 大量データの場合は仮想化を検討

### セキュリティ
- 認証状態を適切にチェック
- ユーザー権限に基づくアクセス制御
- XSS対策を実装

## 開発フロー
1. 機能要件の確認
2. データベース設計（必要に応じて）
3. GraphQLスキーマ設計
4. フロントエンド実装
5. テスト・デバッグ
6. ドキュメント更新

## Serena MCP使用ガイドライン
- **複雑なコード解析**や**アーキテクチャ理解**が必要な場面では積極的にSerenaを使用する
- **Serena推奨場面**：
  - コードベース全体の構造理解
  - シンボル間の参照関係調査
  - クラス・関数・変数の使用箇所特定
  - ファイル間の依存関係分析
  - 大規模リファクタリングの影響範囲調査
  - 設計パターンの実装箇所探索
  - バグの原因となる関連コード特定
- **通常ツール推奨場面**：
  - 単純なファイル読み込み・編集
  - 既知のファイル・関数への直接的な変更
  - シンプルな文字列検索・置換
- Serena MCPの機能を活用して効率的で正確なコード分析を心がける

## 注意事項
- 既存のコードスタイルに合わせる
- 破壊的変更は事前に相談
- パフォーマンスに影響する変更は慎重に検討
- ユーザビリティを最優先に考慮
